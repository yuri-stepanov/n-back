!function(e){var o={};function n(t){if(o[t])return o[t].exports;var c=o[t]={i:t,l:!1,exports:{}};return e[t].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:t})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=142)}({142:function(e,o,n){"use strict";self.addEventListener("fetch",function(e){if(console.log("Fetching request"),console.log(e),"only-if-cached"!==e.request.cache||"same-origin"===e.request.mode)return e.respondWith(caches.match(e.request).then(function(o){var n=e.request.clone();return console.log("Resolved cache"),console.log(o),fetch(n).then(function(n){if(console.log("Performed request: "),console.log(n),(c=n)&&200===c.status&&"basic"===c.type){console.log("requestSuccessful");var t=n.clone();return caches.open("n-back-cache-v1").then(function(o){console.log("Putting into cache"),o.put(e.request,t)}),n}var c;return o?(console.log("Returning from cache"),o):(console.log("Total fail. Returning as is"),n)}).catch(function(e){return console.log("Catching fetch error"),console.log(e),o})}));console.log("Debug tools opened")})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VXb3JrZXIuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInNlbGYiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwicmVxdWVzdCIsImNhY2hlIiwibW9kZSIsInJlc3BvbmRXaXRoIiwiY2FjaGVzIiwibWF0Y2giLCJ0aGVuIiwiY2FjaGVkUmVzcG9uc2UiLCJmZXRjaFJlcXVlc3QiLCJjbG9uZSIsImZldGNoIiwiYWN0dWFsUmVzcG9uc2UiLCJyZXNwb25zZSIsInN0YXR1cyIsInR5cGUiLCJyZXNwb25zZVRvQ2FjaGUiLCJvcGVuIiwicHV0IiwiY2F0Y2giLCJlcnIiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsd0NDOURBQyxLQUFLQyxpQkFBaUIsUUFBUyxTQUFBQyxHQUs3QixHQUpBQyxRQUFRQyxJQUFJLG9CQUNaRCxRQUFRQyxJQUFJRixHQUljLG1CQUF4QkEsRUFBTUcsUUFBUUMsT0FDUyxnQkFBdkJKLEVBQU1HLFFBQVFFLEtBTWhCLE9BQU9MLEVBQU1NLFlBQ1hDLE9BQU9DLE1BQU1SLEVBQU1HLFNBQVNNLEtBQUssU0FBQUMsR0FDL0IsSUFBTUMsRUFBZVgsRUFBTUcsUUFBUVMsUUFLbkMsT0FIQVgsUUFBUUMsSUFBSSxrQkFDWkQsUUFBUUMsSUFBSVEsR0FFTEcsTUFBTUYsR0FDVkYsS0FBSyxTQUFBSyxHQUlKLEdBSEFiLFFBQVFDLElBQUksdUJBQ1pELFFBQVFDLElBQUlZLElBMUJJQyxFQTRCTUQsSUEzQkUsTUFBcEJDLEVBQVNDLFFBQW9DLFVBQWxCRCxFQUFTRSxLQTJCRCxDQUNyQ2hCLFFBQVFDLElBQUkscUJBQ1osSUFBTWdCLEVBQWtCSixFQUFlRixRQU12QyxPQUxBTCxPQUFPWSxLQWpDQSxtQkFpQ2lCVixLQUFLLFNBQUFMLEdBQzNCSCxRQUFRQyxJQUFJLHNCQUNaRSxFQUFNZ0IsSUFBSXBCLEVBQU1HLFFBQVNlLEtBR3BCSixFQXBDTyxJQUFBQyxFQXVDaEIsT0FBSUwsR0FDRlQsUUFBUUMsSUFBSSx3QkFDTFEsSUFHVFQsUUFBUUMsSUFBSSwrQkFDTFksS0FFUk8sTUFBTSxTQUFBQyxHQUdMLE9BRkFyQixRQUFRQyxJQUFJLHdCQUNaRCxRQUFRQyxJQUFJb0IsR0FDTFosT0F0Q2JULFFBQVFDLElBQUkiLCJmaWxlIjoic2VydmljZVdvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQyKTtcbiIsImNvbnN0IENBQ0hFX05BTUUgPSAnbi1iYWNrLWNhY2hlLXYxJztcclxuXHJcbmNvbnN0IHJlcXVlc3RTdWNjZXNzZnVsID0gcmVzcG9uc2UgPT5cclxuICByZXNwb25zZSAmJiByZXNwb25zZS5zdGF0dXMgPT09IDIwMCAmJiByZXNwb25zZS50eXBlID09PSAnYmFzaWMnO1xyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIGV2ZW50ID0+IHtcclxuICBjb25zb2xlLmxvZygnRmV0Y2hpbmcgcmVxdWVzdCcpO1xyXG4gIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuXHJcbiAgLy8gRGV2VG9vbHMgb3BlbmluZyB3aWxsIHRyaWdnZXIgdGhlc2Ugby1pLWMgcmVxdWVzdHMsIHdoaWNoIHRoaXMgU1cgY2FuJ3QgaGFuZGxlLlxyXG4gIGlmIChcclxuICAgIGV2ZW50LnJlcXVlc3QuY2FjaGUgPT09ICdvbmx5LWlmLWNhY2hlZCcgJiZcclxuICAgIGV2ZW50LnJlcXVlc3QubW9kZSAhPT0gJ3NhbWUtb3JpZ2luJ1xyXG4gICkge1xyXG4gICAgY29uc29sZS5sb2coJ0RlYnVnIHRvb2xzIG9wZW5lZCcpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV2ZW50LnJlc3BvbmRXaXRoKFxyXG4gICAgY2FjaGVzLm1hdGNoKGV2ZW50LnJlcXVlc3QpLnRoZW4oY2FjaGVkUmVzcG9uc2UgPT4ge1xyXG4gICAgICBjb25zdCBmZXRjaFJlcXVlc3QgPSBldmVudC5yZXF1ZXN0LmNsb25lKCk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnUmVzb2x2ZWQgY2FjaGUnKTtcclxuICAgICAgY29uc29sZS5sb2coY2FjaGVkUmVzcG9uc2UpO1xyXG5cclxuICAgICAgcmV0dXJuIGZldGNoKGZldGNoUmVxdWVzdClcclxuICAgICAgICAudGhlbihhY3R1YWxSZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnUGVyZm9ybWVkIHJlcXVlc3Q6ICcpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYWN0dWFsUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgIGlmIChyZXF1ZXN0U3VjY2Vzc2Z1bChhY3R1YWxSZXNwb25zZSkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcXVlc3RTdWNjZXNzZnVsJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlVG9DYWNoZSA9IGFjdHVhbFJlc3BvbnNlLmNsb25lKCk7XHJcbiAgICAgICAgICAgIGNhY2hlcy5vcGVuKENBQ0hFX05BTUUpLnRoZW4oY2FjaGUgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQdXR0aW5nIGludG8gY2FjaGUnKTtcclxuICAgICAgICAgICAgICBjYWNoZS5wdXQoZXZlbnQucmVxdWVzdCwgcmVzcG9uc2VUb0NhY2hlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYWN0dWFsUmVzcG9uc2U7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGNhY2hlZFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXR1cm5pbmcgZnJvbSBjYWNoZScpO1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkUmVzcG9uc2U7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RvdGFsIGZhaWwuIFJldHVybmluZyBhcyBpcycpO1xyXG4gICAgICAgICAgcmV0dXJuIGFjdHVhbFJlc3BvbnNlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnQ2F0Y2hpbmcgZmV0Y2ggZXJyb3InKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGVkUmVzcG9uc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KSxcclxuICApO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==